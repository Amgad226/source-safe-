// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  name              String
  password          String
  UserFolder        UserFolder[]
  FileStatistic     FileStatistic[]
  UserFolderRequest UserFolderRequest[]
  FileVersion       FileVersion[]
  CheckIn           CheckIn[]

  @@map("users")
}

model Folder {
  id                Int                 @id @default(autoincrement())
  name              String
  logo              String?
  driveFolderID     String?
  folder_id         Int?
  created_at        DateTime            @default(now())
  parentFolder      Folder?             @relation("ChildFolders", fields: [folder_id], references: [id])
  childFolders      Folder[]            @relation("ChildFolders")
  files             File[]
  UserFolder        UserFolder[]
  UserFolderRequest UserFolderRequest[]

  @@map("folders")
}

model FolderRole {
  id         Int          @id @default(autoincrement())
  name       String
  UserFolder UserFolder[]

  @@map("folder_roles")
}

model UserFolder {
  id             Int        @id @default(autoincrement())
  user           User       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id        Int
  folder         Folder     @relation(fields: [folder_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  folder_id      Int
  folder_role    FolderRole @relation(fields: [folder_role_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  folder_role_id Int

  @@map("users_folders")
}

model File {
  id            Int             @id @default(autoincrement())
  name          String
  extension     String
  created_at    DateTime        @default(now())
  status        StatusEnum      @default(check_out)
  folder_id     Int
  Folder        Folder          @relation(fields: [folder_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  deleted_at    DateTime?
  FileStatistic FileStatistic[]
  FileVersion   FileVersion[]
  CheckIn       CheckIn[]

  @@map("files")
}

model CheckIn {
  id Int @id @default(autoincrement())

  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int

  file_id Int
  File    File @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("check_in")
}

model FileVersion {
  id        Int    @id @default(autoincrement())
  path      String
  name      String
  size      Int
  extension String

  file_id Int
  File    File @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int
  User    User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  deleted_at    DateTime?
  created_at    DateTime        @default(now())
  FileStatistic FileStatistic[]

  @@map("file_versions")
}

enum StatusEnum {
  check_in
  check_out
}

model FileStatistic {
  id Int @id @default(autoincrement())

  text            String?
  created_at      DateTime    @default(now())
  status          StatusEnum
  file            File        @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  file_id         Int
  file_version_id Int
  file_version    FileVersion @relation(fields: [file_version_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user            User        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id         Int

  @@map("file_statistics")
}

model UserFolderRequest {
  id Int @id @default(autoincrement())

  user      User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id   Int
  folder    Folder @relation(fields: [folder_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  folder_id Int

  @@map("user_folder_requests")
}

model BlackListToken {
  id    Int    @id @default(autoincrement())
  token String

  @@map("black_list_tokens")
}
