import {
  Body,
  Controller,
  Get,
  Headers,
  HttpCode,
  HttpStatus,
  Post,
  Req,
  UnauthorizedException,
} from '@nestjs/common';
import { BaseModuleController } from 'src/base-module/base-module.controller';
import { ResponseInterface } from 'src/base-module/response.interface';
import { Public } from 'src/decorators/public.decorators';
import { AuthService } from './auth.service';
import { RefreshTokenDto } from './dto/refresh-token.dto';
import { SignInDto } from './dto/sign-in.dto';
import { SignUpDto } from './dto/sign-up.dto';
import { SignInEntity } from './entities/sign-in/sign-in.entity';
import { TokensEntity } from './entities/create-token.entity';

@Controller('auth')
export class AuthController extends BaseModuleController {
  constructor(private authService: AuthService) {
    super();
  }

  @Public()
  @HttpCode(HttpStatus.OK)
  @Post('sign-in')
  async signIn(
    @Body() signInDto: SignInDto,
  ): Promise<ResponseInterface<SignInEntity>> {
    return this.returnResponse({
      data: await this.authService.signIn(signInDto),
      message: 'from controller ',
      status: HttpStatus.OK,
    });
  }

  @Public()
  @HttpCode(HttpStatus.OK)
  @Post('sign-up')
  async signUp(
    @Body() signUpDto: SignUpDto,
  ): Promise<ResponseInterface<SignInEntity>> {
    return this.returnResponse({
      data: await this.authService.signUp(signUpDto),
      message: 'user created successfully',
      status: HttpStatus.CREATED,
    });
  }

  @Public()
  @HttpCode(HttpStatus.OK)
  @Post('token-by-refresh')
  async newTokensByRefresh(
    @Body() refreshTokenDto: RefreshTokenDto,
  ): Promise<ResponseInterface<TokensEntity>> {
    return this.returnResponse({
      data: this.authService.newTokensByRefresh(refreshTokenDto),
      message: 'tokens generated by refresh',
      status: HttpStatus.CREATED,
    });
  }

  @Post('sign-out')
  async signOut(
    @Headers('authorization') authorizationHeader: string,
  ): Promise<ResponseInterface<boolean>> {
    if (!authorizationHeader || !authorizationHeader.startsWith('Bearer ')) {
      throw new UnauthorizedException('Invalid or missing token');
    }
    const token = authorizationHeader.substring('Bearer '.length);

    return this.returnResponse({
      data: await this.authService.singOut(token),
      message: 'logout successfully',
      status: HttpStatus.OK,
    });
  }
}
